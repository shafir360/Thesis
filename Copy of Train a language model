{"cells":[{"cell_type":"markdown","metadata":{"id":"X4cRE8IbIrIV"},"source":["If you're opening this Notebook on colab, you will probably need to install ðŸ¤— Transformers and ðŸ¤— Datasets. Uncomment the following cell and run it."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"MOsHUjgdIrIW"},"outputs":[{"name":"stdout","output_type":"stream","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting datasets\n","  Downloading datasets-2.3.2-py3-none-any.whl (362 kB)\n","\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 362 kB 5.3 MB/s \n","\u001b[?25hCollecting transformers\n","  Downloading transformers-4.20.1-py3-none-any.whl (4.4 MB)\n","\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 4.4 MB 42.3 MB/s \n","\u001b[?25hRequirement already satisfied: dill\u003c0.3.6 in /usr/local/lib/python3.7/dist-packages (from datasets) (0.3.5.1)\n","Collecting huggingface-hub\u003c1.0.0,\u003e=0.1.0\n","  Downloading huggingface_hub-0.8.1-py3-none-any.whl (101 kB)\n","\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 101 kB 2.4 MB/s \n","\u001b[?25hRequirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from datasets) (4.11.4)\n","Requirement already satisfied: requests\u003e=2.19.0 in /usr/local/lib/python3.7/dist-packages (from datasets) (2.23.0)\n","Requirement already satisfied: tqdm\u003e=4.62.1 in /usr/local/lib/python3.7/dist-packages (from datasets) (4.64.0)\n","Requirement already satisfied: multiprocess in /usr/local/lib/python3.7/dist-packages (from datasets) (0.70.13)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from datasets) (21.3)\n","Collecting responses\u003c0.19\n","  Downloading responses-0.18.0-py3-none-any.whl (38 kB)\n","Collecting xxhash\n","  Downloading xxhash-3.0.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (212 kB)\n","\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 212 kB 63.5 MB/s \n","\u001b[?25hCollecting fsspec[http]\u003e=2021.05.0\n","  Downloading fsspec-2022.5.0-py3-none-any.whl (140 kB)\n","\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 140 kB 50.9 MB/s \n","\u001b[?25hCollecting aiohttp\n","  Downloading aiohttp-3.8.1-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (1.1 MB)\n","\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 1.1 MB 47.8 MB/s \n","\u001b[?25hRequirement already satisfied: numpy\u003e=1.17 in /usr/local/lib/python3.7/dist-packages (from datasets) (1.21.6)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from datasets) (1.3.5)\n","Requirement already satisfied: pyarrow\u003e=6.0.0 in /usr/local/lib/python3.7/dist-packages (from datasets) (6.0.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from huggingface-hub\u003c1.0.0,\u003e=0.1.0-\u003edatasets) (3.7.1)\n","Requirement already satisfied: typing-extensions\u003e=3.7.4.3 in /usr/local/lib/python3.7/dist-packages (from huggingface-hub\u003c1.0.0,\u003e=0.1.0-\u003edatasets) (4.1.1)\n","Collecting pyyaml\u003e=5.1\n","  Downloading PyYAML-6.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (596 kB)\n","\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 596 kB 59.3 MB/s \n","\u001b[?25hRequirement already satisfied: pyparsing!=3.0.5,\u003e=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging-\u003edatasets) (3.0.9)\n","Requirement already satisfied: idna\u003c3,\u003e=2.5 in /usr/local/lib/python3.7/dist-packages (from requests\u003e=2.19.0-\u003edatasets) (2.10)\n","Requirement already satisfied: chardet\u003c4,\u003e=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests\u003e=2.19.0-\u003edatasets) (3.0.4)\n","Requirement already satisfied: certifi\u003e=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests\u003e=2.19.0-\u003edatasets) (2022.6.15)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,\u003c1.26,\u003e=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests\u003e=2.19.0-\u003edatasets) (1.24.3)\n","Collecting urllib3!=1.25.0,!=1.25.1,\u003c1.26,\u003e=1.21.1\n","  Downloading urllib3-1.25.11-py2.py3-none-any.whl (127 kB)\n","\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 127 kB 41.3 MB/s \n","\u001b[?25hRequirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (2022.6.2)\n","Collecting tokenizers!=0.11.3,\u003c0.13,\u003e=0.11.1\n","  Downloading tokenizers-0.12.1-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (6.6 MB)\n","\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 6.6 MB 47.3 MB/s \n","\u001b[?25hRequirement already satisfied: attrs\u003e=17.3.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp-\u003edatasets) (21.4.0)\n","Collecting aiosignal\u003e=1.1.2\n","  Downloading aiosignal-1.2.0-py3-none-any.whl (8.2 kB)\n","Collecting frozenlist\u003e=1.1.1\n","  Downloading frozenlist-1.3.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (144 kB)\n","\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 144 kB 75.5 MB/s \n","\u001b[?25hCollecting multidict\u003c7.0,\u003e=4.5\n","  Downloading multidict-6.0.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (94 kB)\n","\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 94 kB 3.4 MB/s \n","\u001b[?25hCollecting yarl\u003c2.0,\u003e=1.0\n","  Downloading yarl-1.7.2-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (271 kB)\n","\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 271 kB 61.2 MB/s \n","\u001b[?25hRequirement already satisfied: charset-normalizer\u003c3.0,\u003e=2.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp-\u003edatasets) (2.0.12)\n","Collecting async-timeout\u003c5.0,\u003e=4.0.0a3\n","  Downloading async_timeout-4.0.2-py3-none-any.whl (5.8 kB)\n","Collecting asynctest==0.13.0\n","  Downloading asynctest-0.13.0-py3-none-any.whl (26 kB)\n","Requirement already satisfied: zipp\u003e=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata-\u003edatasets) (3.8.0)\n","Requirement already satisfied: python-dateutil\u003e=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas-\u003edatasets) (2.8.2)\n","Requirement already satisfied: pytz\u003e=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas-\u003edatasets) (2022.1)\n","Requirement already satisfied: six\u003e=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil\u003e=2.7.3-\u003epandas-\u003edatasets) (1.15.0)\n","Installing collected packages: multidict, frozenlist, yarl, urllib3, asynctest, async-timeout, aiosignal, pyyaml, fsspec, aiohttp, xxhash, tokenizers, responses, huggingface-hub, transformers, datasets\n","  Attempting uninstall: urllib3\n","    Found existing installation: urllib3 1.24.3\n","    Uninstalling urllib3-1.24.3:\n","      Successfully uninstalled urllib3-1.24.3\n","  Attempting uninstall: pyyaml\n","    Found existing installation: PyYAML 3.13\n","    Uninstalling PyYAML-3.13:\n","      Successfully uninstalled PyYAML-3.13\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","datascience 0.10.6 requires folium==0.2.1, but you have folium 0.8.3 which is incompatible.\u001b[0m\n","Successfully installed aiohttp-3.8.1 aiosignal-1.2.0 async-timeout-4.0.2 asynctest-0.13.0 datasets-2.3.2 frozenlist-1.3.0 fsspec-2022.5.0 huggingface-hub-0.8.1 multidict-6.0.2 pyyaml-6.0 responses-0.18.0 tokenizers-0.12.1 transformers-4.20.1 urllib3-1.25.11 xxhash-3.0.0 yarl-1.7.2\n"]}],"source":["! pip install datasets transformers"]},{"cell_type":"markdown","metadata":{"id":"m6_XBuUXjUdK"},"source":["If you're opening this notebook locally, make sure your environment has an install from the last version of those libraries.\n","\n","To be able to share your model with the community and generate results like the one shown in the picture below via the inference API, there are a few more steps to follow.\n","\n","First you have to store your authentication token from the Hugging Face website (sign up [here](https://huggingface.co/join) if you haven't already!) then execute the following cell and input your username and password:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"t8OpUYdXjUdM"},"outputs":[],"source":["from huggingface_hub import notebook_login\n","\n","notebook_login()"]},{"cell_type":"markdown","metadata":{"id":"JrXZGVdMjUdN"},"source":["Then you need to install Git-LFS. Uncomment the following instructions:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UwPd2kgYjUdP"},"outputs":[],"source":["# !apt install git-lfs"]},{"cell_type":"markdown","metadata":{"id":"-spV5GgLjUdQ"},"source":["Make sure your version of Transformers is at least 4.11.0 since the functionality was introduced in that version:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ESyfMZb5jUdS"},"outputs":[],"source":["import transformers\n","\n","print(transformers.__version__)"]},{"cell_type":"markdown","metadata":{"id":"HFASsisvIrIb"},"source":["You can find a script version of this notebook to fine-tune your model in a distributed fashion using multiple GPUs or TPUs [here](https://github.com/huggingface/transformers/tree/master/examples/language-modeling)."]},{"cell_type":"markdown","metadata":{"id":"a3KD3WXU3l-O"},"source":["# Train a language model"]},{"cell_type":"markdown","metadata":{"id":"JAscNNUD3l-P"},"source":["In this notebook, we'll see how to train a [ðŸ¤— Transformers](https://github.com/huggingface/transformers) model on a language modeling task. We will cover two types of language modeling tasks which are:\n","\n","- Causal language modeling: the model has to predict the next token in the sentence (so the labels are the same as the inputs shifted to the right). To make sure the model does not cheat, it gets an attention mask that will prevent it to access the tokens after token i when trying to predict the token i+1 in the sentence.\n","\n","![Widget inference representing the causal language modeling task](https://github.com/huggingface/notebooks/blob/main/examples/images/causal_language_modeling.png?raw=1)\n","\n","- Masked language modeling: the model has to predict some tokens that are masked in the input. It still has access to the whole sentence, so it can use the tokens before and after the tokens masked to predict their value.\n","\n","![Widget inference representing the masked language modeling task](https://github.com/huggingface/notebooks/blob/main/examples/images/masked_language_modeling.png?raw=1)\n","\n","We will see how to easily load and preprocess the dataset for each one of those tasks, and how to use the `Trainer` API to train a model on it.\n","\n","This notebooks assumes you have trained a tokenizer on the corpus you are using, see the [How to train a tokenizer](https://github.com/huggingface/notebooks/blob/master/examples/tokenizer_training.ipynb) notebook ([open in colab](https://colab.research.google.com/github/huggingface/notebooks/blob/master/examples/tokenizer_training.ipynb)).\n","\n","A script version of this notebook you can directly run on a distributed environment or on TPU is available in our [examples folder](https://github.com/huggingface/transformers/tree/master/examples)."]},{"cell_type":"markdown","metadata":{"id":"1r_n9OWV3l-Q"},"source":["## Preparing the dataset"]},{"cell_type":"markdown","metadata":{"id":"kswRMhPc3l-Q"},"source":["For each of those tasks, we will use the [Wikitext 2]() dataset as an example. You can load it very easily with the ðŸ¤— Datasets library."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"n2ZRs1cL3l-R","outputId":"11151c56-be90-4d11-e7df-db85e745ca5c"},"outputs":[{"name":"stderr","output_type":"stream","text":["Reusing dataset wikitext (/home/sgugger/.cache/huggingface/datasets/wikitext/wikitext-2-raw-v1/1.0.0/aa5e094000ec7afeb74c3be92c88313cd6f132d564c7effd961c10fd47c76f20)\n"]}],"source":["from datasets import load_dataset\n","datasets = load_dataset('wikitext', 'wikitext-2-raw-v1')"]},{"cell_type":"markdown","metadata":{"id":"f1-9jepM3l-W"},"source":["You can replace the dataset above with any dataset hosted on [the hub](https://huggingface.co/datasets) or use your own files. Just uncomment the following cell and replace the paths with values that will lead to your files:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uxSaGa_l3l-W"},"outputs":[],"source":["# datasets = load_dataset(\"text\", data_files={\"train\": path_to_train.txt, \"validation\": path_to_validation.txt}"]},{"cell_type":"markdown","metadata":{"id":"jY1SwIrY3l-a"},"source":["You can also load datasets from a csv or a JSON file, see the [full documentation](https://huggingface.co/docs/datasets/loading_datasets.html#from-local-files) for more information."]},{"cell_type":"markdown","metadata":{"id":"u3EtYfeHIrIz"},"source":["To access an actual element, you need to select a split first, then give an index:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"X6HrpprwIrIz","outputId":"d7670bc0-42e4-4c09-8a6a-5c018ded7d95"},"outputs":[{"data":{"text/plain":["{'text': ' The game \\'s battle system , the BliTZ system , is carried over directly from Valkyira Chronicles . During missions , players select each unit using a top @-@ down perspective of the battlefield map : once a character is selected , the player moves the character around the battlefield in third @-@ person . A character can only act once per @-@ turn , but characters can be granted multiple turns at the expense of other characters \\' turns . Each character has a field and distance of movement limited by their Action Gauge . Up to nine characters can be assigned to a single mission . During gameplay , characters will call out if something happens to them , such as their health points ( HP ) getting low or being knocked out by enemy attacks . Each character has specific \" Potentials \" , skills unique to each character . They are divided into \" Personal Potential \" , which are innate skills that remain unaltered unless otherwise dictated by the story and can either help or impede a character , and \" Battle Potentials \" , which are grown throughout the game and always grant boons to a character . To learn Battle Potentials , each character has a unique \" Masters Table \" , a grid @-@ based skill table that can be used to acquire and link different skills . Characters also have Special Abilities that grant them temporary boosts on the battlefield : Kurt can activate \" Direct Command \" and move around the battlefield without depleting his Action Point gauge , the character Reila can shift into her \" Valkyria Form \" and become invincible , while Imca can target multiple enemy units with her heavy weapon . \\n'}"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["datasets[\"train\"][10]"]},{"cell_type":"markdown","metadata":{"id":"WHUmphG3IrI3"},"source":["To get a sense of what the data looks like, the following function will show some examples picked randomly in the dataset."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ur5sNUcZ3l-g"},"outputs":[],"source":["from datasets import ClassLabel\n","import random\n","import pandas as pd\n","from IPython.display import display, HTML\n","\n","def show_random_elements(dataset, num_examples=10):\n","    assert num_examples \u003c= len(dataset), \"Can't pick more elements than there are in the dataset.\"\n","    picks = []\n","    for _ in range(num_examples):\n","        pick = random.randint(0, len(dataset)-1)\n","        while pick in picks:\n","            pick = random.randint(0, len(dataset)-1)\n","        picks.append(pick)\n","    \n","    df = pd.DataFrame(dataset[picks])\n","    for column, typ in dataset.features.items():\n","        if isinstance(typ, ClassLabel):\n","            df[column] = df[column].transform(lambda i: typ.names[i])\n","    display(HTML(df.to_html()))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1Uk8NROQ3l-k","outputId":"a822dcec-51e3-4dba-c73c-dba9e0301726"},"outputs":[{"data":{"text/html":["\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003etext\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e0\u003c/th\u003e\n","      \u003ctd\u003e= 7 / 2 ) suppresses the superconductivity , which is induced by eliminating this local moment ( J = \\n\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e1\u003c/th\u003e\n","      \u003ctd\u003eOn his Chelsea debut away at Manchester United , McNichol found himself playing at right back after ten minutes when Sid Tickridge sustained an injury . Once restored to the forward line , his goals helped Chelsea avoid relegation to the Second Division at the end of his first season . A \" dramatic last @-@ minute goal ... enabled Chelsea to snatch a lucky victory at West Bromwich \" with three games left , and he scored the third goal of Chelsea 's 3 â€“ 1 defeat of Manchester City in their last fixture of the season which confirmed their escape from the relegation positions . \\n\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2\u003c/th\u003e\n","      \u003ctd\u003e= = = Manpower = = = \\n\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e3\u003c/th\u003e\n","      \u003ctd\u003e\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e4\u003c/th\u003e\n","      \u003ctd\u003eThe ironic interpretations of \" Ulysses \" may be the result of the modern tendency to consider the narrator of a dramatic monologue as necessarily \" unreliable \" . According to critic Dwight Culler , the poem has been a victim of revisionist readings in which the reader expects to reconstruct the truth from a misleading narrator 's accidental revelations . ( Compare the more obvious use of this approach in Robert Browning 's \" My Last Duchess \" . ) Culler himself views \" Ulysses \" as a dialectic in which the speaker weighs the virtues of a contemplative and an active approach to life ; Ulysses moves through four emotional stages that are self @-@ revelatory , not ironic : beginning with his rejection of the barren life to which he has returned in Ithaca , he then fondly recalls his heroic past , recognizes the validity of Telemachus ' method of governing , and with these thoughts plans another journey . \\n\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e5\u003c/th\u003e\n","      \u003ctd\u003e\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e6\u003c/th\u003e\n","      \u003ctd\u003e= = Legacy = = \\n\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e7\u003c/th\u003e\n","      \u003ctd\u003e\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e8\u003c/th\u003e\n","      \u003ctd\u003e\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e9\u003c/th\u003e\n","      \u003ctd\u003e= = Exit list = = \\n\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e"],"text/plain":["\u003cIPython.core.display.HTML object\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["show_random_elements(datasets[\"train\"])"]},{"cell_type":"markdown","metadata":{"id":"CKerdF353l-o"},"source":["As we can see, some of the texts are a full paragraph of a Wikipedia article while others are just titles or empty lines."]},{"cell_type":"markdown","metadata":{"id":"JEA1ju653l-p"},"source":["## Causal Language modeling"]},{"cell_type":"markdown","metadata":{"id":"v5GTGKZS3l-q"},"source":["For causal language modeling (CLM) we are going to take all the texts in our dataset and concatenate them after they are tokenized. Then we will split them in examples of a certain sequence length. This way the model will receive chunks of contiguous text that may look like:\n","```\n","part of text 1\n","```\n","or \n","```\n","end of text 1 [BOS_TOKEN] beginning of text 2\n","```\n","depending on whether they span over several of the original texts in the dataset or not. The labels will be the same as the inputs, shifted to the left.\n","\n","We will use the [`gpt2`](https://huggingface.co/gpt2) architecture for this example. You can pick any of the checkpoints listed [here](https://huggingface.co/models?filter=causal-lm) instead. For the tokenizer, you can replace the checkpoint by the one you trained yourself."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-WGBCO343l-q"},"outputs":[],"source":["model_checkpoint = \"gpt2\"\n","tokenizer_checkpoint = \"sgugger/gpt2-like-tokenizer\""]},{"cell_type":"markdown","metadata":{"id":"5io6fY_d3l-u"},"source":["To tokenize all our texts with the same vocabulary that was used when training the model, we have to download a pretrained tokenizer. This is all done by the `AutoTokenizer` class:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iAYlS40Z3l-v"},"outputs":[],"source":["from transformers import AutoTokenizer\n","    \n","tokenizer = AutoTokenizer.from_pretrained(tokenizer_checkpoint)"]},{"cell_type":"markdown","metadata":{"id":"rpOiBrJ13l-y"},"source":["We can now call the tokenizer on all our texts. This is very simple, using the [`map`](https://huggingface.co/docs/datasets/package_reference/main_classes.html#datasets.Dataset.map) method from the Datasets library. First we define a function that call the tokenizer on our texts:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lS2m25YM3l-z"},"outputs":[],"source":["def tokenize_function(examples):\n","    return tokenizer(examples[\"text\"])"]},{"cell_type":"markdown","metadata":{"id":"M9xVAa3s3l-2"},"source":["Then we apply it to all the splits in our `datasets` object, using `batched=True` and 4 processes to speed up the preprocessing. We won't need the `text` column afterward, so we discard it."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NVAO0H8u3l-3","outputId":"30d88b8a-e353-4e13-f709-8e5e06ef747b"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n"]}],"source":["tokenized_datasets = datasets.map(tokenize_function, batched=True, num_proc=4, remove_columns=[\"text\"])"]},{"cell_type":"markdown","metadata":{"id":"8qik3J_C3l-7"},"source":["If we now look at an element of our datasets, we will see the text have been replaced by the `input_ids` the model will need:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nYv_mcKk3l-7","outputId":"8334734c-0f86-4e18-ec17-4216a2d5dd18"},"outputs":[{"data":{"text/plain":["{'attention_mask': [1, 1, 1, 1, 1, 1],\n"," 'input_ids': [238, 8576, 9441, 2987, 238, 252]}"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["tokenized_datasets[\"train\"][1]"]},{"cell_type":"markdown","metadata":{"id":"obvgcXda3l--"},"source":["Now for the harder part: we need to concatenate all our texts together then split the result in small chunks of a certain `block_size`. To do this, we will use the `map` method again, with the option `batched=True`. This option actually lets us change the number of examples in the datasets by returning a different number of examples than we got. This way, we can create our new samples from a batch of examples.\n","\n","First, we grab the maximum length our model was pretrained with. This might be a big too big to fit in your GPU RAM, so here we take a bit less at just 128."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DVHs5aCA3l-_"},"outputs":[],"source":["# block_size = tokenizer.model_max_length\n","block_size = 128"]},{"cell_type":"markdown","metadata":{"id":"RpNfGiMw3l_A"},"source":["Then we write the preprocessing function that will group our texts:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iaAJy5Hu3l_B"},"outputs":[],"source":["def group_texts(examples):\n","    # Concatenate all texts.\n","    concatenated_examples = {k: sum(examples[k], []) for k in examples.keys()}\n","    total_length = len(concatenated_examples[list(examples.keys())[0]])\n","    # We drop the small remainder, we could add padding if the model supported it instead of this drop, you can\n","        # customize this part to your needs.\n","    total_length = (total_length // block_size) * block_size\n","    # Split by chunks of max_len.\n","    result = {\n","        k: [t[i : i + block_size] for i in range(0, total_length, block_size)]\n","        for k, t in concatenated_examples.items()\n","    }\n","    result[\"labels\"] = result[\"input_ids\"].copy()\n","    return result"]},{"cell_type":"markdown","metadata":{"id":"LGJWXtNv3l_C"},"source":["First note that we duplicate the inputs for our labels. This is because the model of the ðŸ¤— Transformers library apply the shifting to the right, so we don't need to do it manually.\n","\n","Also note that by default, the `map` method will send a batch of 1,000 examples to be treated by the preprocessing function. So here, we will drop the remainder to make the concatenated tokenized texts a multiple of `block_size` every 1,000 examples. You can adjust this behavior by passing a higher batch size (which will also be processed slower). You can also speed-up the preprocessing by using multiprocessing:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gXUSfBrq3l_C","outputId":"34e55885-3d8f-4f05-cbdb-706ce56a25f8"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n"]}],"source":["lm_datasets = tokenized_datasets.map(\n","    group_texts,\n","    batched=True,\n","    batch_size=1000,\n","    num_proc=4,\n",")"]},{"cell_type":"markdown","metadata":{"id":"6n84V8Gc3l_G"},"source":["And we can check our datasets have changed: now the samples contain chunks of `block_size` contiguous tokens, potentially spanning over several of our original texts."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hTeGCLl_3l_G","outputId":"ab381a07-f92e-4b14-f7b6-e4af5513d7c4"},"outputs":[{"data":{"text/plain":["' the \" Nameless \", a penal military unit serving the nation of Gallia during the Second Europan War who perform secret black operations and are pitted against the Imperial unit \" Calamaty Raven \". \\n The game began development in 2010, carrying over a large portion of the work done on Valkyria Chronicles II. While it retained the standard features of the series, it also underwent multiple adjustments, such as making the game more forgiving for series newcomers. Character designer Raita Honjou and composer Hitoshi Sakimoto both returned from previous entries, along with Valkyria Chronicles II director Takeshi Ozawa. A large'"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["tokenizer.decode(lm_datasets[\"train\"][1][\"input_ids\"])"]},{"cell_type":"markdown","metadata":{"id":"iEmeQ7Xm3l_H"},"source":["Now that the data has been cleaned, we're ready to instantiate our `Trainer`. First we create the model using the same config as our checkpoint, but initialized with random weights:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sPqQA3TT3l_I"},"outputs":[],"source":["from transformers import AutoConfig, AutoModelForCausalLM\n","\n","config = AutoConfig.from_pretrained(model_checkpoint)\n","model = AutoModelForCausalLM.from_config(config)"]},{"cell_type":"markdown","metadata":{"id":"VyPQTOF_3l_J"},"source":["And we will needsome `TrainingArguments`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jElf8LJ33l_K"},"outputs":[],"source":["from transformers import Trainer, TrainingArguments"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YbSwEhQ63l_L"},"outputs":[],"source":["training_args = TrainingArguments(\n","    f\"{model_checkpoint}-wikitext2\",\n","    evaluation_strategy = \"epoch\",\n","    learning_rate=2e-5,\n","    weight_decay=0.01,\n","    push_to_hub=True,,\n",")"]},{"cell_type":"markdown","metadata":{"id":"-F98UNlLjUdt"},"source":["The last argument to setup everything so we can push the model to the [Hub](https://huggingface.co/models) regularly during training. Remove it if you didn't follow the installation steps at the top of the notebook. If you want to save your model locally in a name that is different than the name of the repository it will be pushed, or if you want to push your model under an organization and not your name space, use the `hub_model_id` argument to set the repo name (it needs to be the full name, including your namespace: for instance `\"sgugger/gpt-finetuned-wikitext2\"` or `\"huggingface/gpt-finetuned-wikitext2\"`)."]},{"cell_type":"markdown","metadata":{"id":"sZRbT9ui3l_N"},"source":["We pass along all of those to the `Trainer` class:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OEuqwIra3l_N"},"outputs":[],"source":["trainer = Trainer(\n","    model=model,\n","    args=training_args,\n","    train_dataset=lm_datasets[\"train\"],\n","    eval_dataset=lm_datasets[\"validation\"],\n",")"]},{"cell_type":"markdown","metadata":{"id":"6Vvz34Td3l_O"},"source":["And we can train our model:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NyZvu_MF3l_P","outputId":"b69d0931-7f1f-4f2d-fdb8-09d37c7418bb"},"outputs":[{"name":"stderr","output_type":"stream","text":["***** Running training *****\n","  Num examples = 17991\n","  Num Epochs = 3\n","  Instantaneous batch size per device = 8\n","  Total train batch size (w. parallel, distributed \u0026 accumulation) = 8\n","  Gradient Accumulation steps = 1\n","  Total optimization steps = 6747\n"]},{"data":{"text/html":["\n","    \u003cdiv\u003e\n","      \n","      \u003cprogress value='6747' max='6747' style='width:300px; height:20px; vertical-align: middle;'\u003e\u003c/progress\u003e\n","      [6747/6747 13:47, Epoch 3/3]\n","    \u003c/div\u003e\n","    \u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: left;\"\u003e\n","      \u003cth\u003eEpoch\u003c/th\u003e\n","      \u003cth\u003eTraining Loss\u003c/th\u003e\n","      \u003cth\u003eValidation Loss\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e6.748400\u003c/td\u003e\n","      \u003ctd\u003e6.652853\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e6.404400\u003c/td\u003e\n","      \u003ctd\u003e6.388820\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e6.244400\u003c/td\u003e\n","      \u003ctd\u003e6.314827\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\u003cp\u003e"],"text/plain":["\u003cIPython.core.display.HTML object\u003e"]},"metadata":{},"output_type":"display_data"},{"name":"stderr","output_type":"stream","text":["Saving model checkpoint to test-clm/checkpoint-500\n","Configuration saved in test-clm/checkpoint-500/config.json\n","Model weights saved in test-clm/checkpoint-500/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-1000\n","Configuration saved in test-clm/checkpoint-1000/config.json\n","Model weights saved in test-clm/checkpoint-1000/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-1500\n","Configuration saved in test-clm/checkpoint-1500/config.json\n","Model weights saved in test-clm/checkpoint-1500/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-2000\n","Configuration saved in test-clm/checkpoint-2000/config.json\n","Model weights saved in test-clm/checkpoint-2000/pytorch_model.bin\n","***** Running Evaluation *****\n","  Num examples = 1934\n","  Batch size = 8\n","Saving model checkpoint to test-clm/checkpoint-2500\n","Configuration saved in test-clm/checkpoint-2500/config.json\n","Model weights saved in test-clm/checkpoint-2500/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-3000\n","Configuration saved in test-clm/checkpoint-3000/config.json\n","Model weights saved in test-clm/checkpoint-3000/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-3500\n","Configuration saved in test-clm/checkpoint-3500/config.json\n","Model weights saved in test-clm/checkpoint-3500/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-4000\n","Configuration saved in test-clm/checkpoint-4000/config.json\n","Model weights saved in test-clm/checkpoint-4000/pytorch_model.bin\n","***** Running Evaluation *****\n","  Num examples = 1934\n","  Batch size = 8\n","Saving model checkpoint to test-clm/checkpoint-4500\n","Configuration saved in test-clm/checkpoint-4500/config.json\n","Model weights saved in test-clm/checkpoint-4500/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-5000\n","Configuration saved in test-clm/checkpoint-5000/config.json\n","Model weights saved in test-clm/checkpoint-5000/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-5500\n","Configuration saved in test-clm/checkpoint-5500/config.json\n","Model weights saved in test-clm/checkpoint-5500/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-6000\n","Configuration saved in test-clm/checkpoint-6000/config.json\n","Model weights saved in test-clm/checkpoint-6000/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-6500\n","Configuration saved in test-clm/checkpoint-6500/config.json\n","Model weights saved in test-clm/checkpoint-6500/pytorch_model.bin\n","***** Running Evaluation *****\n","  Num examples = 1934\n","  Batch size = 8\n","\n","\n","Training completed. Do not forget to share your model on huggingface.co/models =)\n","\n","\n"]},{"data":{"text/plain":["TrainOutput(global_step=6747, training_loss=6.595932285008615, metrics={'train_runtime': 827.616, 'train_samples_per_second': 65.215, 'train_steps_per_second': 8.152, 'total_flos': 5158187333517312.0, 'train_loss': 6.595932285008615, 'epoch': 3.0})"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["trainer.train()"]},{"cell_type":"markdown","metadata":{"id":"3APq-vUc3l_R"},"source":["Once the training is completed, we can evaluate our model and get its perplexity on the validation set like this:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"diKZnB1I3l_R","outputId":"9b3ac725-0117-4830-f380-a555ee57c8cf"},"outputs":[{"name":"stderr","output_type":"stream","text":["***** Running Evaluation *****\n","  Num examples = 1934\n","  Batch size = 8\n"]},{"data":{"text/html":["\n","    \u003cdiv\u003e\n","      \n","      \u003cprogress value='242' max='242' style='width:300px; height:20px; vertical-align: middle;'\u003e\u003c/progress\u003e\n","      [242/242 00:07]\n","    \u003c/div\u003e\n","    "],"text/plain":["\u003cIPython.core.display.HTML object\u003e"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Perplexity: 552.71\n"]}],"source":["import math\n","eval_results = trainer.evaluate()\n","print(f\"Perplexity: {math.exp(eval_results['eval_loss']):.2f}\")"]},{"cell_type":"markdown","metadata":{"id":"_JKx0yYdjUdv"},"source":["The perplexity is still quite high since for this demo we trained on a small dataset for a small number of epochs. For a real LM training, you  would need a larger dataset and more epochs."]},{"cell_type":"markdown","metadata":{"id":"wY82caEX3l_i"},"source":["You can now upload the result of the training to the Hub, just execute this instruction:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GtxKhhqtjUdw"},"outputs":[],"source":["trainer.push_to_hub()"]},{"cell_type":"markdown","metadata":{"id":"-tpiH7ZXjUdw"},"source":["You can now share this model with all your friends, family, favorite pets: they can all load it with the identifier `\"your-username/the-name-you-picked\"` so for instance:\n","\n","```python\n","from transformers import AutoModelForCausalLM\n","\n","model = AutoModelForCausalLM.from_pretrained(\"sgugger/my-awesome-model\")\n","```"]},{"cell_type":"markdown","metadata":{"id":"q-EIELH43l_T"},"source":["## Masked language modeling"]},{"cell_type":"markdown","metadata":{"id":"LWk97-Ny3l_T"},"source":["For masked language modeling (MLM) we are going to use the same preprocessing as before for our dataset with one additional step: we will randomly mask some tokens (by replacing them by `[MASK]`) and the labels will be adjusted to only include the masked tokens (we don't have to predict the non-masked tokens). If you use a tokenizer you trained yourself, make sure the `[MASK]` token is among the special tokens you passed during training!\n","\n","We will use the [`bert-base-cased`](https://huggingface.co/bert-based-cased) model for this example. You can pick any of the checkpoints listed [here](https://huggingface.co/models?filter=masked-lm) instead. For the tokenizer, replace the checkpoint by the one you trained."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QRTpmyCc3l_T"},"outputs":[],"source":["model_checkpoint = \"bert-base-cased\"\n","tokenizer_checkpoint = \"sgugger/bert-like-tokenizer\""]},{"cell_type":"markdown","metadata":{"id":"12F1ulgT3l_V"},"source":["We can apply the same tokenization function as before, we just need to update our tokenizer to use the checkpoint we just picked:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"h8RCYcvr3l_V","outputId":"a5ffeb0a-71da-4b27-e57a-c62f1927562e"},"outputs":[{"name":"stderr","output_type":"stream","text":["https://huggingface.co/sgugger/bert-like-tokenizer/resolve/main/tokenizer_config.json not found in cache or force_download set to True, downloading to /home/sgugger/.cache/huggingface/transformers/tmpj0hlre6a\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"8df3dfef4a514d72921fb211a1cad33f","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Downloading', max=320.0, style=ProgressStyle(description_â€¦"]},"metadata":{},"output_type":"display_data"},{"name":"stderr","output_type":"stream","text":["storing https://huggingface.co/sgugger/bert-like-tokenizer/resolve/main/tokenizer_config.json in cache at /home/sgugger/.cache/huggingface/transformers/8e2bf16fe90bdd2f922f692d28792f71927c19b3ec57cf1457567cd848515842.0bbe47aa0e39b09ed05a95f7d42a27299232ce8e9ef28608e8f8a1cb57a74c0a\n","creating metadata file for /home/sgugger/.cache/huggingface/transformers/8e2bf16fe90bdd2f922f692d28792f71927c19b3ec57cf1457567cd848515842.0bbe47aa0e39b09ed05a95f7d42a27299232ce8e9ef28608e8f8a1cb57a74c0a\n","https://huggingface.co/sgugger/bert-like-tokenizer/resolve/main/vocab.txt not found in cache or force_download set to True, downloading to /home/sgugger/.cache/huggingface/transformers/tmpceo1r0j0\n"]},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"229b3e62b0b149baae4413aa2e45d1df","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Downloading', max=174528.0, style=ProgressStyle(descriptiâ€¦"]},"metadata":{},"output_type":"display_data"},{"name":"stderr","output_type":"stream","text":["storing https://huggingface.co/sgugger/bert-like-tokenizer/resolve/main/vocab.txt in cache at /home/sgugger/.cache/huggingface/transformers/d2c888a76d867b3c110720b637a5958d9748e157d245806d646a7c015a393b95.7b1a250944f9d3669d4f57ab97b1f6a21a494a84cff113694cf15d673e7bb6d5\n","creating metadata file for /home/sgugger/.cache/huggingface/transformers/d2c888a76d867b3c110720b637a5958d9748e157d245806d646a7c015a393b95.7b1a250944f9d3669d4f57ab97b1f6a21a494a84cff113694cf15d673e7bb6d5\n"]},{"name":"stdout","output_type":"stream","text":["\n"]},{"name":"stderr","output_type":"stream","text":["https://huggingface.co/sgugger/bert-like-tokenizer/resolve/main/tokenizer.json not found in cache or force_download set to True, downloading to /home/sgugger/.cache/huggingface/transformers/tmp9i7md8wn\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"435ca2d6534e44a99d14832ecd449a98","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Downloading', max=364912.0, style=ProgressStyle(descriptiâ€¦"]},"metadata":{},"output_type":"display_data"},{"name":"stderr","output_type":"stream","text":["storing https://huggingface.co/sgugger/bert-like-tokenizer/resolve/main/tokenizer.json in cache at /home/sgugger/.cache/huggingface/transformers/f385664afe38b7f081454cb8d1aa1ff0c4e16507dfbafe1fad8fc85538262261.159bf1d23803f236f036667eafea5ec2d6b22bcaf4b88d1dafeb8e6c7c35d6f9\n","creating metadata file for /home/sgugger/.cache/huggingface/transformers/f385664afe38b7f081454cb8d1aa1ff0c4e16507dfbafe1fad8fc85538262261.159bf1d23803f236f036667eafea5ec2d6b22bcaf4b88d1dafeb8e6c7c35d6f9\n"]},{"name":"stdout","output_type":"stream","text":["\n"]},{"name":"stderr","output_type":"stream","text":["https://huggingface.co/sgugger/bert-like-tokenizer/resolve/main/special_tokens_map.json not found in cache or force_download set to True, downloading to /home/sgugger/.cache/huggingface/transformers/tmp58nljjm6\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"a33845d75d1041d19dc37659520ccb42","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Downloading', max=112.0, style=ProgressStyle(description_â€¦"]},"metadata":{},"output_type":"display_data"},{"name":"stderr","output_type":"stream","text":["storing https://huggingface.co/sgugger/bert-like-tokenizer/resolve/main/special_tokens_map.json in cache at /home/sgugger/.cache/huggingface/transformers/c90d08712ec5954e9bf3853df3bab5a6549e408225f4e9b6dd90f3bc3d3c0461.dd8bd9bfd3664b530ea4e645105f557769387b3da9f79bdb55ed556bdd80611d\n","creating metadata file for /home/sgugger/.cache/huggingface/transformers/c90d08712ec5954e9bf3853df3bab5a6549e408225f4e9b6dd90f3bc3d3c0461.dd8bd9bfd3664b530ea4e645105f557769387b3da9f79bdb55ed556bdd80611d\n","loading file https://huggingface.co/sgugger/bert-like-tokenizer/resolve/main/vocab.txt from cache at /home/sgugger/.cache/huggingface/transformers/d2c888a76d867b3c110720b637a5958d9748e157d245806d646a7c015a393b95.7b1a250944f9d3669d4f57ab97b1f6a21a494a84cff113694cf15d673e7bb6d5\n","loading file https://huggingface.co/sgugger/bert-like-tokenizer/resolve/main/tokenizer.json from cache at /home/sgugger/.cache/huggingface/transformers/f385664afe38b7f081454cb8d1aa1ff0c4e16507dfbafe1fad8fc85538262261.159bf1d23803f236f036667eafea5ec2d6b22bcaf4b88d1dafeb8e6c7c35d6f9\n","loading file https://huggingface.co/sgugger/bert-like-tokenizer/resolve/main/added_tokens.json from cache at None\n","loading file https://huggingface.co/sgugger/bert-like-tokenizer/resolve/main/special_tokens_map.json from cache at /home/sgugger/.cache/huggingface/transformers/c90d08712ec5954e9bf3853df3bab5a6549e408225f4e9b6dd90f3bc3d3c0461.dd8bd9bfd3664b530ea4e645105f557769387b3da9f79bdb55ed556bdd80611d\n","loading file https://huggingface.co/sgugger/bert-like-tokenizer/resolve/main/tokenizer_config.json from cache at /home/sgugger/.cache/huggingface/transformers/8e2bf16fe90bdd2f922f692d28792f71927c19b3ec57cf1457567cd848515842.0bbe47aa0e39b09ed05a95f7d42a27299232ce8e9ef28608e8f8a1cb57a74c0a\n"]},{"name":"stdout","output_type":"stream","text":["\n"]},{"name":"stderr","output_type":"stream","text":["Token indices sequence length is longer than the specified maximum sequence length for this model (571 \u003e 512). Running this sequence through the model will result in indexing errors\n"]},{"name":"stdout","output_type":"stream","text":["\n","\n","\n","\n"]},{"name":"stderr","output_type":"stream","text":["Token indices sequence length is longer than the specified maximum sequence length for this model (554 \u003e 512). Running this sequence through the model will result in indexing errors\n","Token indices sequence length is longer than the specified maximum sequence length for this model (522 \u003e 512). Running this sequence through the model will result in indexing errors\n","Token indices sequence length is longer than the specified maximum sequence length for this model (657 \u003e 512). Running this sequence through the model will result in indexing errors\n","Token indices sequence length is longer than the specified maximum sequence length for this model (514 \u003e 512). Running this sequence through the model will result in indexing errors\n"]},{"name":"stdout","output_type":"stream","text":["\n","\n","\n","\n","\n","\n","\n","\n"]}],"source":["tokenizer = AutoTokenizer.from_pretrained(tokenizer_checkpoint)\n","tokenized_datasets = datasets.map(tokenize_function, batched=True, num_proc=4, remove_columns=[\"text\"])"]},{"cell_type":"markdown","metadata":{"id":"MTuy8UUs3l_X"},"source":["And like before, we group texts together and chunk them in samples of length `block_size`. You can skip that step if your dataset is composed of individual sentences."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LVYPMwEs3l_X","outputId":"e71ed7f1-b182-4643-a8fb-3d731c70e40b"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n"]}],"source":["lm_datasets = tokenized_datasets.map(\n","    group_texts,\n","    batched=True,\n","    batch_size=1000,\n","    num_proc=4,\n",")"]},{"cell_type":"markdown","metadata":{"id":"nFJ49iHJ3l_Z"},"source":["The rest is very similar to what we had, with two exceptions. First we use a model suitable for masked LM:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PM10A9Za3l_Z","outputId":"fff2d5bb-397d-4d5d-9aa9-933090cb6680"},"outputs":[{"name":"stderr","output_type":"stream","text":["loading configuration file https://huggingface.co/bert-base-cased/resolve/main/config.json from cache at /home/sgugger/.cache/huggingface/transformers/a803e0468a8fe090683bdc453f4fac622804f49de86d7cecaee92365d4a0f829.a64a22196690e0e82ead56f388a3ef3a50de93335926ccfa20610217db589307\n","Model config BertConfig {\n","  \"architectures\": [\n","    \"BertForMaskedLM\"\n","  ],\n","  \"attention_probs_dropout_prob\": 0.1,\n","  \"gradient_checkpointing\": false,\n","  \"hidden_act\": \"gelu\",\n","  \"hidden_dropout_prob\": 0.1,\n","  \"hidden_size\": 768,\n","  \"initializer_range\": 0.02,\n","  \"intermediate_size\": 3072,\n","  \"layer_norm_eps\": 1e-12,\n","  \"max_position_embeddings\": 512,\n","  \"model_type\": \"bert\",\n","  \"num_attention_heads\": 12,\n","  \"num_hidden_layers\": 12,\n","  \"pad_token_id\": 0,\n","  \"position_embedding_type\": \"absolute\",\n","  \"transformers_version\": \"4.9.0.dev0\",\n","  \"type_vocab_size\": 2,\n","  \"use_cache\": true,\n","  \"vocab_size\": 28996\n","}\n","\n"]}],"source":["from transformers import AutoConfig, AutoModelForMaskedLM\n","\n","config = AutoConfig.from_pretrained(model_checkpoint)\n","model = AutoModelForMaskedLM.from_config(config)"]},{"cell_type":"markdown","metadata":{"id":"cLicUy51jUdz"},"source":["We redefine our `TrainingArguments`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q6Vjm-jqjUdz"},"outputs":[],"source":["training_args = TrainingArguments(\n","    \"test-clm\",\n","    evaluation_strategy = \"epoch\",\n","    learning_rate=2e-5,\n","    weight_decay=0.01,\n","    push_to_hub=True,\n","    push_to_hub_model_id=f\"{model_checkpoint}-wikitext2\",\n",")"]},{"cell_type":"markdown","metadata":{"id":"HMKhuC0gjUd0"},"source":["Like before, the last two arguments are to setup everything so we can push the model to the [Hub](https://huggingface.co/models) at the end of training. Remove the two of them if you didn't follow the installation steps at the top of the notebook, otherwise you can change the value of `push_to_hub_model_id` to something you would prefer."]},{"cell_type":"markdown","metadata":{"id":"z6uuUnvz3l_b"},"source":["Finally, we use a special `data_collator`. The `data_collator` is a function that is responsible of taking the samples and batching them in tensors. In the previous example, we had nothing special to do, so we just used the default for this argument. Here we want to do the random-masking. We could do it as a pre-processing step (like the tokenization) but then the tokens would always be masked the same way at each epoch. By doing this step inside the `data_collator`, we ensure this random masking is done in a new way each time we go over the data.\n","\n","To do this masking for us, the library provides a `DataCollatorForLanguageModeling`. We can adjust the probability of the masking:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nRZ-5v_P3l_b"},"outputs":[],"source":["from transformers import DataCollatorForLanguageModeling\n","data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm_probability=0.15)"]},{"cell_type":"markdown","metadata":{"id":"bqHnWcYC3l_d"},"source":["Then we just have to pass everything to `Trainer` and begin training:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"V-Y3gNqV3l_d"},"outputs":[],"source":["trainer = Trainer(\n","    model=model,\n","    args=training_args,\n","    train_dataset=lm_datasets[\"train\"],\n","    eval_dataset=lm_datasets[\"validation\"],\n","    data_collator=data_collator,\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Y9TFqDG_3l_e","outputId":"2e0c8bca-0e04-4b4f-ad06-8dd320af6c37"},"outputs":[{"name":"stderr","output_type":"stream","text":["***** Running training *****\n","  Num examples = 18761\n","  Num Epochs = 3\n","  Instantaneous batch size per device = 8\n","  Total train batch size (w. parallel, distributed \u0026 accumulation) = 8\n","  Gradient Accumulation steps = 1\n","  Total optimization steps = 7038\n"]},{"data":{"text/html":["\n","    \u003cdiv\u003e\n","      \n","      \u003cprogress value='7038' max='7038' style='width:300px; height:20px; vertical-align: middle;'\u003e\u003c/progress\u003e\n","      [7038/7038 13:09, Epoch 3/3]\n","    \u003c/div\u003e\n","    \u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: left;\"\u003e\n","      \u003cth\u003eEpoch\u003c/th\u003e\n","      \u003cth\u003eTraining Loss\u003c/th\u003e\n","      \u003cth\u003eValidation Loss\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e7.091100\u003c/td\u003e\n","      \u003ctd\u003e7.049844\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e6.905400\u003c/td\u003e\n","      \u003ctd\u003e6.870386\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003ctd\u003e3\u003c/td\u003e\n","      \u003ctd\u003e6.856900\u003c/td\u003e\n","      \u003ctd\u003e6.888713\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\u003cp\u003e"],"text/plain":["\u003cIPython.core.display.HTML object\u003e"]},"metadata":{},"output_type":"display_data"},{"name":"stderr","output_type":"stream","text":["Saving model checkpoint to test-clm/checkpoint-500\n","Configuration saved in test-clm/checkpoint-500/config.json\n","Model weights saved in test-clm/checkpoint-500/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-1000\n","Configuration saved in test-clm/checkpoint-1000/config.json\n","Model weights saved in test-clm/checkpoint-1000/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-1500\n","Configuration saved in test-clm/checkpoint-1500/config.json\n","Model weights saved in test-clm/checkpoint-1500/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-2000\n","Configuration saved in test-clm/checkpoint-2000/config.json\n","Model weights saved in test-clm/checkpoint-2000/pytorch_model.bin\n","***** Running Evaluation *****\n","  Num examples = 2009\n","  Batch size = 8\n","Saving model checkpoint to test-clm/checkpoint-2500\n","Configuration saved in test-clm/checkpoint-2500/config.json\n","Model weights saved in test-clm/checkpoint-2500/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-3000\n","Configuration saved in test-clm/checkpoint-3000/config.json\n","Model weights saved in test-clm/checkpoint-3000/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-3500\n","Configuration saved in test-clm/checkpoint-3500/config.json\n","Model weights saved in test-clm/checkpoint-3500/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-4000\n","Configuration saved in test-clm/checkpoint-4000/config.json\n","Model weights saved in test-clm/checkpoint-4000/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-4500\n","Configuration saved in test-clm/checkpoint-4500/config.json\n","Model weights saved in test-clm/checkpoint-4500/pytorch_model.bin\n","***** Running Evaluation *****\n","  Num examples = 2009\n","  Batch size = 8\n","Saving model checkpoint to test-clm/checkpoint-5000\n","Configuration saved in test-clm/checkpoint-5000/config.json\n","Model weights saved in test-clm/checkpoint-5000/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-5500\n","Configuration saved in test-clm/checkpoint-5500/config.json\n","Model weights saved in test-clm/checkpoint-5500/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-6000\n","Configuration saved in test-clm/checkpoint-6000/config.json\n","Model weights saved in test-clm/checkpoint-6000/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-6500\n","Configuration saved in test-clm/checkpoint-6500/config.json\n","Model weights saved in test-clm/checkpoint-6500/pytorch_model.bin\n","Saving model checkpoint to test-clm/checkpoint-7000\n","Configuration saved in test-clm/checkpoint-7000/config.json\n","Model weights saved in test-clm/checkpoint-7000/pytorch_model.bin\n","***** Running Evaluation *****\n","  Num examples = 2009\n","  Batch size = 8\n","\n","\n","Training completed. Do not forget to share your model on huggingface.co/models =)\n","\n","\n"]},{"data":{"text/plain":["TrainOutput(global_step=7038, training_loss=7.04967836345858, metrics={'train_runtime': 790.1373, 'train_samples_per_second': 71.232, 'train_steps_per_second': 8.907, 'total_flos': 4683068522136576.0, 'train_loss': 7.04967836345858, 'epoch': 3.0})"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["trainer.train()"]},{"cell_type":"markdown","metadata":{"id":"KDBi0reX3l_g"},"source":["Like before, we can evaluate our model on the validation set. The perplexity is much lower than for the CLM objective because for the MLM objective, we only have to make predictions for the masked tokens (which represent 15% of the total here) while having access to the rest of the tokens. It's thus an easier task for the model."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4hSaANqj3l_g","outputId":"eeeb8727-2e27-4aeb-ac71-c98123214661"},"outputs":[{"name":"stderr","output_type":"stream","text":["***** Running Evaluation *****\n","  Num examples = 2009\n","  Batch size = 8\n"]},{"data":{"text/html":["\n","    \u003cdiv\u003e\n","      \n","      \u003cprogress value='252' max='252' style='width:300px; height:20px; vertical-align: middle;'\u003e\u003c/progress\u003e\n","      [252/252 00:06]\n","    \u003c/div\u003e\n","    "],"text/plain":["\u003cIPython.core.display.HTML object\u003e"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Perplexity: 947.45\n"]}],"source":["eval_results = trainer.evaluate()\n","print(f\"Perplexity: {math.exp(eval_results['eval_loss']):.2f}\")"]},{"cell_type":"markdown","metadata":{"id":"4c_5PHdKjUd2"},"source":["The perplexity is still quite high since for this demo we trained on a small dataset for a small number of epochs. For a real LM training, you  would need a larger dataset and more epochs."]},{"cell_type":"markdown","metadata":{"id":"Y8BvL_rnjUd2"},"source":["You can now upload the result of the training to the Hub, just execute this instruction:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_YOT3H0AjUd3"},"outputs":[],"source":["trainer.push_to_hub()"]},{"cell_type":"markdown","metadata":{"id":"2o7QMPv0jUd3"},"source":["You can now share this model with all your friends, family, favorite pets: they can all load it with the identifier `\"your-username/the-name-you-picked\"` so for instance:\n","\n","```python\n","from transformers import AutoModelForMaskedLM\n","\n","model = AutoModelForMaskedLM.from_pretrained(\"sgugger/my-awesome-model\")\n","```"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TomUmfcTjUd4"},"outputs":[],"source":[""]}],"metadata":{"accelerator":"GPU","colab":{"name":"Copy of Train a language model","provenance":[{"file_id":"https://github.com/huggingface/notebooks/blob/main/examples/language_modeling_from_scratch.ipynb","timestamp":1657111698887}],"version":""},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}